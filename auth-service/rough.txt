see i am able to run only authentication service on localhost 3000 in browser and i am getting successfull login username , password and welcome msg. 

i will give you all the codes , files on authentication service directory , docker.copose yml file , by studying that please give me the codes , files, contents for other three services and with their local host runnin gports

i hvae created docker directory , inside that auth-service directory, inside this we have following files

in app.js,

const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const authRoutes = require('./routes/auth');

app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({ extended: true }));

app.use('/auth', authRoutes);

app.get('/', (req, res) => {
  res.render('login', { message: 'Welcome to the Auth Service!' });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Auth Service running on port ${PORT}`));


in Dockerfile,

FROM node:18-alpine
WORKDIR /usr/src/app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["npm", "start"]



in package.json, 

{
  "name": "auth-service",
  "version": "1.0.0",
  "main": "app.js",
  "dependencies": {
    "express": "^4.18.2",
    "ejs": "^3.1.8",
    "pg": "^8.8.0"
  },
  "scripts": {
    "start": "node app.js"
  }
}


we have created one 'routes' directory in auth-service directory,inside this we have auth.js in that we have following content, 

const express = require('express');
const router = express.Router();

router.get('/login', (req, res) => {
  res.render('login', { message: 'Please login' });
});

router.post('/login', (req, res) => {
  const { username, password } = req.body;
  // Add authentication logic here
  res.send(`User ${username} logged in successfully!`);
});

module.exports = router;


we have created another directory 'views' directory in auth-service directory, inside this we have login.ejs in that we have following content, 

const express = require('express');
const router = express.Router();

router.get('/login', (req, res) => {
  res.render('login', { message: 'Please login' });
});

router.post('/login', (req, res) => {
  const { username, password } = req.body;
  // Add authentication logic here
  res.send(`User ${username} logged in successfully!`);
});

module.exports = router;




below is the docker-compose.yml file in docker directory,

version: '3.8'

services:
  auth-service:
    build: ./auth-service
    ports:
      - "3000:3000"
    networks:
      - microservices-network

  product-service:
    build: ./product-service
    ports:
      - "5000:5000"
    networks:
      - microservices-network

  order-service:
    build: ./order-service
    ports:
      - "8080:8080"
    networks:
      - microservices-network

  payment-service:
    build: ./payment-service
    ports:
      - "8000:8000"
    networks:
      - microservices-network

  postgres-db:
    image: postgres:13
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - microservices-network

  mongodb:
    image: mongo:4.4
    volumes:
      - mongo-data:/data/db
    networks:
      - microservices-network

  mysql-db:
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: payment_db
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - microservices-network

networks:
  microservices-network:

volumes:
  postgres-data:
  mongo-data:
  mysql-data:


